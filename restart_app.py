#!/usr/bin/env python3
"""
App Restart Script with Health Check Fix

This script properly stops any existing Streamlit processes and restarts
the application with proper configuration to avoid health check issues.
"""

import os
import sys
import subprocess
import time
import psutil
import signal

def kill_streamlit_processes():
    """Kill any existing Streamlit processes"""
    killed_count = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            if proc.info['name'] and 'python' in proc.info['name'].lower():
                cmdline = proc.info['cmdline'] or []
                if any('streamlit' in str(arg) for arg in cmdline):
                    print(f"üîÑ Killing Streamlit process: PID {proc.info['pid']}")
                    proc.kill()
                    killed_count += 1
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    if killed_count > 0:
        print(f"‚úÖ Killed {killed_count} Streamlit processes")
        time.sleep(2)  # Wait for processes to fully terminate
    else:
        print("‚ÑπÔ∏è  No existing Streamlit processes found")

def check_port_available(port=8501):
    """Check if the port is available"""
    try:
        result = subprocess.run(
            ["netstat", "-an"], 
            capture_output=True, 
            text=True, 
            shell=True
        )
        if f":{port}" in result.stdout and "LISTENING" in result.stdout:
            print(f"‚ö†Ô∏è  Port {port} is still in use")
            return False
        else:
            print(f"‚úÖ Port {port} is available")
            return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not check port status: {e}")
        return True

def start_streamlit():
    """Start Streamlit with optimized settings"""
    print("üöÄ Starting AI Financial Portfolio Advisor with health check fixes...")
    
    # Set environment variables for better performance
    env = os.environ.copy()
    env.update({
        "STREAMLIT_SERVER_HEADLESS": "true",
        "STREAMLIT_SERVER_ENABLE_CORS": "false",
        "STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION": "false",
        "STREAMLIT_SERVER_MAX_MESSAGE_SIZE": "200",
        "STREAMLIT_BROWSER_GATHER_USAGE_STATS": "false"
    })
    
    # Command to start Streamlit
    cmd = [
        sys.executable, "-m", "streamlit", "run", "streamlit_app.py",
        "--server.headless", "true",
        "--server.port", "8501",
        "--server.address", "0.0.0.0",
        "--server.enableCORS", "false",
        "--server.enableXsrfProtection", "false",
        "--logger.level", "info"
    ]
    
    print("üìù Starting with command:", " ".join(cmd))
    
    try:
        # Start the process
        process = subprocess.Popen(cmd, env=env)
        
        print("‚è±Ô∏è  Waiting for server to start...")
        time.sleep(5)
        
        # Check if process is still running
        if process.poll() is None:
            print("‚úÖ Streamlit server started successfully!")
            print("üåê Open your browser to: http://localhost:8501")
            print("‚ö†Ô∏è  If you see 'Demo Mode Active', wait 3-5 minutes for model loading")
            print("üîÑ Press Ctrl+C to stop the server")
            
            # Wait for the process to complete
            try:
                process.wait()
            except KeyboardInterrupt:
                print("\nüõë Stopping server...")
                process.terminate()
                process.wait()
                print("‚úÖ Server stopped")
        else:
            print("‚ùå Streamlit server failed to start")
            return False
            
    except Exception as e:
        print(f"‚ùå Error starting Streamlit: {e}")
        return False
    
    return True

def main():
    """Main function"""
    print("üîß AI Financial Portfolio Advisor - Restart Script")
    print("=" * 55)
    
    print("üõë Step 1: Stopping existing processes...")
    kill_streamlit_processes()
    
    print("\nüîç Step 2: Checking port availability...")
    if not check_port_available():
        print("‚ö†Ô∏è  Waiting for port to be released...")
        time.sleep(5)
        if not check_port_available():
            print("‚ùå Port 8501 is still in use. You may need to manually kill processes.")
    
    print("\nüöÄ Step 3: Starting application...")
    success = start_streamlit()
    
    if not success:
        print("\n‚ùå Failed to start application")
        sys.exit(1)

if __name__ == "__main__":
    main() 